package template;

//the list of imports
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import logist.LogistSettings;
import logist.Measures;
import logist.behavior.AuctionBehavior;
import logist.config.Parsers;
import logist.agent.Agent;
import logist.simulation.Vehicle;
import logist.simulation.VehicleImpl;
import logist.plan.Plan;
import logist.task.Task;
import logist.task.TaskDistribution;
import logist.task.TaskSet;
import logist.topology.Topology;
import logist.topology.Topology.City;

/**
 * Auction of tasks between different companies.
 *
 */
@SuppressWarnings("unused")
public class AuctionTemplate implements AuctionBehavior {

	private Topology topology;
	private TaskDistribution distribution;
	private Agent agent;
	private Random random;
	private Vehicle vehicle;
	private City currentCity;
    private double pValue;

    private int marginalCost;
    private int futureMaginalCost;
	private CentralizedClass ourSolution;
	private CentralizedClass ourFutureSolution;
	private boolean firstIteration;
	private int iterations;
	private HashMap<Integer, Opponent> opponents;
	private double meanCapacity;
	private double meanCostPerKm;
	private List<City> toDiscover;
	private CentralizedClass bestASLS;
	private int bestCostSLS;
	private int benefit;
	
    private long timeout_plan;
    private long timeout_bid;
	
	/**
	 * setup method which is used in first place when we run the program,
	 * we use it as a method to initialise our global variables.
	 */
	@Override
	public void setup(Topology topology, TaskDistribution distribution,
			Agent agent) {

		iterations = 0;
		marginalCost = 0;
		futureMaginalCost =0;
		firstIteration = true;
		pValue = 0.7;
		
		opponents = new HashMap<Integer, Opponent>(); //Integer determinate it's position in Long[] bid table
		ourSolution = new CentralizedClass(agent.vehicles());
		
		this.topology = topology;
		this.distribution = distribution;
		this.agent = agent;
		this.vehicle = agent.vehicles().get(0);
		this.currentCity = vehicle.homeCity();
		
		long seed = -9019554669489983951L * currentCity.hashCode() * agent.id();
		this.random = new Random(seed);
		
		meanCapacity = 0;
		meanCostPerKm = 0;
		for(Vehicle v : agent.vehicles()){
			meanCapacity += v.capacity();
			meanCostPerKm += v.costPerKm();
		}
		meanCapacity /= agent.vehicles().size();
		meanCostPerKm /= agent.vehicles().size();
		benefit = 0;
		
		toDiscover = new ArrayList<City>(topology.cities());
		
		LogistSettings ls = null;
        try {
            ls = Parsers.parseSettings("config\\settings_auction.xml");
        }
        catch (Exception exc) {
            System.out.println("There was a problem loading the configuration file.");
        }
		
        timeout_plan = ls.get(LogistSettings.TimeoutKey.PLAN);
        timeout_bid = ls.get(LogistSettings.TimeoutKey.BID);
	}
	
	/**
	 * The result of the auction for task previous
	 * 
	 * @param previous
	 * 	the task that have been sell at n-th auction
	 * @param winner
	 * 	the id of the winner of the auction
	 * @param bids
	 * 	bids of all companies in competition
	 */
	@Override
	public void auctionResult(Task previous, int winner, Long[] bids) {
		iterations++;
		System.out.println();
        System.out.println(winner + " won " + previous);
        for (int i = 0; i < bids.length; ++i) {
            System.out.println("  " + i + " bidded " + bids[i] + " CHF");
        }
		/**
		 * In case our company is winner we:
		 * 	we update our current solution with the speculative one that included the task in auction
		 * 	we update our marginal cost with the speculative one
		 *  ToDiscover is a list of city we haven't visit yet,
		 *  so we remove all city that we will discover with this new task
		 *  we add to our benefits our bid
		 */
		if (winner == agent.id()) {
			currentCity = previous.deliveryCity;
			ourSolution = ourFutureSolution;
			marginalCost = futureMaginalCost;
			toDiscover.removeAll(previous.pickupCity.pathTo(previous.deliveryCity));
			toDiscover.remove(previous.pickupCity);
			benefit += bids[winner];
		}
		
		/**
		 * If we are just after first auction,
		 * we try to speculate on opponent vehicle position (we focus only on one vehicle by opponent)
		 * with the help of his bid 
		 */
		if(firstIteration){
			
			/**
			 * Here we compute more or less what would be the bid if opponent had vehicle in city c
			 */
			HashMap<City,Double> distanceToPickup = new HashMap<City,Double>();
			for(City c : topology.cities()){
				distanceToPickup.put(c, Measures.unitsToKM((c.distanceUnitsTo(previous.pickupCity)+previous.pickupCity.distanceUnitsTo(previous.deliveryCity))*(long)meanCostPerKm));
			}
			for(int i = 0; i<bids.length; i++){
				if(i != agent.id()){
					Long bid = bids[i];
					double minDiff = Double.MAX_VALUE;
					City minCity = null;
					for(City c : topology.cities()){
						if(minDiff > Math.abs(bid -distanceToPickup.get(c))){
							minDiff = Math.abs(bid -distanceToPickup.get(c));
							minCity = c;
						}
					}
					/**
					 * We create the ficticious Vehicle for the opponent 
					 */
					System.out.println("mincity :"+minCity.name); //Some debuggin print to see vehicle city
					VehicleImpl vi = new VehicleImpl(0, "opponent", (int)meanCapacity, (int)meanCostPerKm, minCity, 0L, Color.black);
					Vehicle v = vi.getInfo();
					ArrayList<Vehicle> ve = new ArrayList<Vehicle>();
					ve.add(v);
					CentralizedClass cc = new CentralizedClass(ve);
					Opponent op = new Opponent(new ArrayList<Task>(),cc,ve);
					opponents.put(i, op);
				}
			}
				
		}
		
		/**
		 * For each opponent after auction
		 * if op isn't the winner we have to change it speculative solution with the old one
		 * if op is the winner and it's the first iteration (so op does not have yet a speculative solution)
		 *  we put the task it won into it solution 
		 */
		for(Integer oppId : opponents.keySet()){			
			Opponent op = opponents.get(oppId);
			if(oppId != winner){		
				op.getSolution().removeTask(previous);
				op.setCurCost(op.getSolution().computeCost());			
			}
			else if(firstIteration && oppId == winner ){
				op.getSolution().putTask(previous, op.getVehicle().get(0));
				op.addTask(previous);
				op.setCurCost(op.getSolution().computeCost());
			}
			else{
				op.addTask(previous);
			}
			
			//Method to print speculative opponent plan
			System.out.println("----Opponent-----");
			if(!op.getSolution().isEmpty()){
				for(Plan p : op.getSolution().computePlan(op.getVehicle())){
					System.out.println(p);
				}
			}
			System.out.println("---------------");*/
		}
		firstIteration = false; 
		
	}
	
	/**
	 * This method launch the auction for task task.
	 * 
	 * @param task
	 * 	the task in auction
	 */
	@Override
	public Long askPrice(Task task) {
		//System.out.println("task in auction: "+task);
		long time_start = System.currentTimeMillis();
		//System.out.println("task in auction "+task);
		Long resultBid = Long.MAX_VALUE;
		
		/**
		 * Here we search for a vehicle with enough capacity to pickup the task,
		 * if we don't have such one we bid inf
		 * (Normaly we can assume at least one vehicle will be able to carry task)
		 */
		Vehicle v = cantCarry(task);
		if(v == null){
			//No vehicle can carry the task, so bid = inf
			return resultBid;
		}
		try {
			/**
			 * This line compute our first cost before opponents influence it
			 */
			resultBid = getFactorBid(task,v);
			resultBid = Math.max(resultBid, 30);
			double minOpponentCost = Double.MAX_VALUE;
			if(!firstIteration){
				
				/**
				 * For the first ten iterations we compute speculative bid for all others opponents
				 * after that we compute speculative bid only for the three best opponents 
				 */
				if(iterations < 10){
					for(Integer i : opponents.keySet()){
						time_start = System.currentTimeMillis();
						Opponent op = opponents.get(i);
						op.getSolution().putTask(task,op.getVehicle().get(0));
						CentralizedClass cc = sLS(op.getSolution(), op.getVehicle() , (long)(1/(6.*opponents.size())*timeout_bid+time_start));//TODO: tcondition in fuction of time!!!
						double cost = cc.computeCost() - op.getCurCost();
						System.out.println("cost = "+cost+" cc compute cost = "+cc.computeCost()+" getCurCost = "+op.getCurCost());
						op.setSolution(cc);
						if(cost < minOpponentCost){
							minOpponentCost = cost;
						}
					}
				}
				else{
					/**
					 * Here we sort the opponents by their number of tasks to take only the three best
					 * And compute their optimal solution so their possible bid
					 */
					Collection<Opponent> c = opponents.values();
					List<Opponent> l = new ArrayList<Opponent>(c);
					Collections.sort(l, new Comparator<Opponent>(){
						@Override
						public int compare(Opponent arg0, Opponent arg1) {					
							return arg0.getTasks().size()<arg1.getTasks().size() ? 1 : -1 ;
						}				
					});
					int si = Math.min(3,l.size());
					for(int i = 0; i< si; i++){
						time_start = System.currentTimeMillis();
						Opponent op = l.get(i);
						op.getSolution().putTask(task,op.getVehicle().get(0));						
						CentralizedClass cc = sLS(op.getSolution(), op.getVehicle() , (long)(1/(18.)*timeout_bid+time_start));//TODO: tcondition in fuction of time!!!
						double cost = cc.computeCost() - op.getCurCost();
						op.setSolution(cc);
						if(cost < minOpponentCost){
							minOpponentCost = cost;
						}
					}

				}
				/**
				 * With the minimum speculative cost of the opponents we change our result.
				 * 
				 */
				
				long diffAbs = Math.abs((long)minOpponentCost - resultBid);
				if(diffAbs < resultBid*0.05){
					resultBid = (long) (resultBid*0.95);
				}
				else{
					resultBid = (long) (resultBid*1.05);
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return resultBid;
	}

	/**
	 * Method to compute our initial solution before computing the solutions of the opponents
	 * there are 3 steps, 
	 * 	first the bid is the marginal cost
	 * 	second we decrease the bid if it gives us higher chance to get packet to discover city where we never been
	 *  third we decrease the bid if the weight of task is low
	 * @param task
	 * 	the task that is in auction and that we add to our speculative solution
	 * @param v
	 * 	the vehicle to which the task will be assign initially
	 * @return
	 * 	the bid
	 *
	 */
	private Long getFactorBid(Task task, Vehicle v) throws Exception {
		Long bid = new Long( getInitialBid(task,v));
		double factor = 1.;
		factor += getFactorProbability(task);
		factor += getFactorCapacity(task);
		return (long)(bid*factor);
	}

	/**
	 * Method that return a factor to multiply with the bid in function of weight of the task
	 * 
	 * @param task
	 * 	the task in auction
	 * @return
	 * 	the factor
	 */
	private double getFactorCapacity(Task task) {
		double factor = Math.exp(task.weight/meanCapacity);
		return AuctionTemplate.map(factor, 1, Math.exp(1), -0.05, 0.3);
	}

	//This Method compute the factor with which we multiply the bid.
	//The factor is in function of the cities where we never been.
	/**
	 * This method compute a factor to multiply with the bid.
	 * we decrease the bid if the city we will go through when we take the task have high probability 
	 * to receive a new task to a city we never been.
	 * This help us to make our vehicle to go through each city. 
	 * 
	 * @param task
	 * 	the task in auction
	 * @return
	 * 	the factor
	 */
	private double getFactorProbability(Task task) {
		double probability = 0;
		City pickup = task.pickupCity;
		for(City c : toDiscover){
			probability += distribution.probability(pickup, c);
		}
		
		for(City onPath: task.pickupCity.pathTo(task.deliveryCity)){
			for(City c : toDiscover){
				probability += distribution.probability(onPath, c);
			}	
		}
		probability = Math.log10(probability+1);
		return AuctionTemplate.map(probability, 0, 1, 0.05, -0.10);
			
	}

	/**
	 * This method return the vehicle to which the auction task will initially be assigned
	 * This method is based on the assumption we will always have a vehicle able to carry the task
	 * 
	 * @param task
	 * 	the auction task
	 * @return
	 * 	the vehicle that will initially carry the task
	 */
	private Vehicle cantCarry(Task task) {
		boolean taskPut = false;
		int index = (int)(Math.random()*agent.vehicles().size());
		while(true){		
			if(agent.vehicles().get(index).capacity() >= task.weight)
				return agent.vehicles().get(index);	
			index = (index +1) % agent.vehicles().size();
		}
	}

	/**
	 * Method to compute the marginal cost
	 * 
	 * @param task
	 * 	the auction task we had to our speculative solution
	 * @param v
	 * 	the vehicle to which we will assign the task
	 * @return
	 * 	the marginal cost
	 */
	private int getInitialBid(Task task, Vehicle v) throws Exception {
		long time_start = System.currentTimeMillis();
		ourFutureSolution = ourSolution.clone();
		ourFutureSolution.addFirst(new TaskClass(task,TaskClass.pickup), v); //will always return true
		ourFutureSolution = sLS(ourFutureSolution, agent.vehicles(), (long)((4/6.)*timeout_bid+time_start));
		
		futureMaginalCost = ourFutureSolution.computeCost();
		return futureMaginalCost-marginalCost;
	}

	/**
	 * Method to compute the plan after all tasks have been sold
	 * 
	 * @param vehicles
	 * 	the list of vehicle of our company
	 * @param tasks
	 * 	the tasks we won during auction
	 */
	@Override
	public List<Plan> plan(List<Vehicle> vehicles, TaskSet tasks) {
		long time_start = System.currentTimeMillis();
        
//		System.out.println("Agent " + agent.id() + " has tasks " + tasks);
       
        CentralizedClass result = null;
		try {
			result = ourSolution.clone(tasks);
			result = sLS(result, vehicles, (long)((4/6.)*timeout_plan+time_start));
			
		} catch (Exception e) {
			System.exit(-1);
		}
		
		/**
		System.out.println("Benefit before minus plan us "+benefit);
		for(Plan p : result.computePlan(agent.vehicles())){
			System.out.println(p);
			benefit -= Measures.unitsToKM(p.totalDistanceUnits()*5);
		}
		System.out.println("Final Benefit us "+benefit);*/
        long time_end = System.currentTimeMillis();
        long duration = time_end - time_start;
        System.out.println("The plan was generated in "+duration+" milliseconds.");
        
        List<Plan> plans = result.computePlan(vehicles);
        
        return plans;
	}
	
	/**
	 * Method used inside SLS that return a solution (old one or a random one in new ones) in function of pValue
	 * In this method we use bestASLS to store the solution with minimum cost that will be return at the end of SLS computation.
	 * 
	 * @param aOld
	 * 	the old solution
	 * @param n
	 * 	the set of new solution 
	 * @return
	 * 	the old solution or the best new solution in function of randomness
	 */
	public CentralizedClass localChoice(CentralizedClass aOld, List<CentralizedClass> n){
		CentralizedClass abest = null;
		for(CentralizedClass cc : n){
			int actualCost = cc.computeCost();
			if(bestCostSLS > actualCost){
				bestCostSLS = actualCost;
				bestASLS = cc;
			}
		}
		if(!n.isEmpty()){
			abest = n.get((int)Math.random()*n.size());
		}
		
		if(Math.random() > pValue || abest == null){
			return aOld;
		}
		else{
			return abest;
		}
	}
	
	//If it wasn't possible to assign the task to vehicle v2 we return null, to be treated in chooseNeighbours;
	/**
	 * Method to change move the first task of vehicle v1 to vehicle v2
	 * 
	 * @param a
	 * 	the centralized class (solution) where this change has to be made
	 * @param v1
	 * 	the vehicle to which we remove the first task
	 * @param v2
	 * 	the vehicle to which we put the first task
	 * @return
	 * 	if the swap was impossible null else the new centralized class (solution)
	 */
	public CentralizedClass changingVehicle(CentralizedClass a, Vehicle v1, Vehicle v2){
		CentralizedClass newA = a.clone();
		TaskClass tc = newA.removeFirst(v1);
		if(!newA.addFirst(tc, v2)){
			return null;
		}
		
		return newA;
	}
	
	//If it wasn't possible to swap tasks we return null, to be treated in chooseNeighbours;
	/**
	 * Method to swap task of vehicle v at indexOld to indexNew
	 * 
	 * @param a
	 * 	the centralized class (solution) where this change has to be made
	 * @param v
	 * 	the vehicle to which the task order is modified
	 * @param indexOld
	 * 	the index of the task class that will be moved
	 * @param indexNew
	 * 	the index where the task class will be placed
	 * @return
	 * 	null if the change of order was impossible, the new centralized class else
	 */
	public CentralizedClass changingTaskOrder(CentralizedClass a, Vehicle v, int indexOld, int indexNew){
		CentralizedClass newA = a.clone();
		if(!newA.swapTask(v, indexOld, indexNew)){
			return null;
		}
		return newA;
	}
	
	/**
	 * Method that create other CentralizedClass (solutions) from the previous one a,
	 * by changing first task of a vehicle chosen randomly and
	 * by changing task class order inside a task class assign to a random vehicle 
	 * @param a
	 * 	the solution that we want to extract neighbors solutions
	 * @param vehicles
	 * 	the vehicles of the solution
	 * @return
	 */
	public List<CentralizedClass> ChooseNeighbours(CentralizedClass a, List<Vehicle> vehicles){
		List<CentralizedClass> n = new ArrayList<CentralizedClass>();
		boolean bool = true;
		Vehicle vi = null;
		int rand =  (int)Math.floor(Math.random()*(vehicles.size()));

		/**
		 * Randomly choose a vehicle that already have task assigned
		 */
		while(bool){	
			vi = vehicles.get(rand);
			if(a.getNbTask(vi) > 0){
				bool = false;
			}
			else{
				rand = ++rand % vehicles.size();
			}
		}
		
		/**
		 * Create neighbors solutions by changing loads between vehicles
		 */
		for(Vehicle v : vehicles){
			if(!v.equals(vi)){
				CentralizedClass newA = changingVehicle(a,vi,v);
				if(newA != null){
					n.add(newA);
				}
			}
		}
		
		/**
		 * Create neighbors by changing task class order of a vehicle
		 */
		int length = a.getNbTask(vi);
		if(length >=4){
			for(int tIdx1 = 0; tIdx1 < length-1; tIdx1++){
				for(int tIdx2=tIdx1+1; tIdx2 < length; tIdx2++){
					CentralizedClass newA = changingTaskOrder(a,vi,tIdx1,tIdx2);
					if(newA != null){
						n.add(newA);
					}
				}
			}
		}
		return n;
	}
	
	/**
	 * The stochastic algorithm to find best solution
	 * 
	 * @param solution
	 * 	the initial solution that we want to improve
	 * @param vehicles
	 * 	the vehicles of that solution
	 * @param tCondition
	 * 	the time condition we put to make program finish on time
	 * @return
	 * 	the best solution find by stochastic algorithm
	 * 
	 */
	public CentralizedClass sLS(CentralizedClass solution,List<Vehicle> vehicles, long tCondition) throws Exception{
		CentralizedClass a = solution;
		bestASLS = a;
		bestCostSLS = a.computeCost();
		
		while(System.currentTimeMillis() < tCondition){
			CentralizedClass aOld = a;
			List<CentralizedClass> n = ChooseNeighbours(aOld, vehicles);
			a = localChoice(aOld, n);
		}
		
		return bestASLS;
	}
	
	/**
	 * Method to map x that is between a and b to new value that is between c and d
	 */
	static double map(double x, double a, double b, double c, double d) {
        return (x - a) * (d - c) / (b - a) + c;
    }
}
