package template;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Random;

import logist.simulation.Vehicle;
import logist.agent.Agent;
import logist.behavior.ReactiveBehavior;
import logist.plan.Action;
import logist.plan.Action.Move;
import logist.plan.Action.Pickup;
import logist.task.Task;
import logist.task.TaskDistribution;
import logist.topology.Topology;
import logist.topology.Topology.City;

public class ReactiveTemplate implements ReactiveBehavior {

	private Random random;
	private double pPickup;
	private int numActions;
	private Agent myAgent;
	private double goodEnough;

	@Override
	public void setup(Topology topology, TaskDistribution td, Agent agent) {
		double costPerKm = agent.vehicles().get(0).costPerKm(); //Be carefull because it's the cost for 1st vehicle
		// Reads the discount factor from the agents.xml file.
		// If the property is not present it defaults to 0.95
		Double discount = agent.readProperty("discount-factor", Double.class,
				0.95);
		this.random = new Random();
		this.pPickup = discount;
		this.numActions = 0;
		this.myAgent = agent;
		
		
		List<State> states = new ArrayList<State>();
		List<City> actions = topology.cities();
		
		for(City from: topology.cities()){
			for(City to: topology.cities()){
				if(!from.equals(to)){
					states.add( new State(from,to));
				}
			}
			states.add(new State(from,null));
		}
		
		List<ArrayList<Double>> rewards = new ArrayList<ArrayList<Double>>();
		/**
		 * Si el estado es city1 to ? y que la action es city1 -> null
		 * Si el estado es city1 to null y que la action es city -> - coste(city1,city2)
		 * Si el estado es city1 to city2 y que la action es city2 -> AR(city1,city2) - coste(city1,city2)
		 * Si el estado es city1 to city2 y que la action es city3 -> null
		 */
		for(State s: states){
			ArrayList<Double> forState = new ArrayList<Double>();
			for(City act: actions){
				if(s.getFrom().equals(act)){
					forState.add(null);
				}
				else{
					if(!s.haveDestination()){
						forState.add(- s.getFrom().distanceTo(act) * costPerKm);				
					}
					else{
						if(s.getTo().equals(act)){
							forState.add(td.reward(s.getFrom(), act)- s.getFrom().distanceTo(act) * costPerKm);
						}
						else{
							forState.add(null);
						}
					}
				}
			}
			rewards.add(forState);
		}
		
		List<ArrayList<ArrayList<Double>>> transitions = new ArrayList<ArrayList<ArrayList<Double>>>();
		/**
		 * Si el estado es city1 to ? y que la action es city1 -> null
		 * Si el estado es city1 to null y que la action es city -> - coste(city1,city2)
		 * Si el estado es city1 to city2 y que la action es city2 -> AR(city1,city2) - coste(city1,city2)
		 * Si el estado es city1 to city2 y que la action es city3 -> null
		 */
		for(State s: states){
			ArrayList<ArrayList<Double>> forS = new ArrayList<ArrayList<Double>>();
			for(City act: actions){
				ArrayList<Double> forA = new ArrayList<Double>();
				
				//ACCUMULADOR
				for(State sPrim : states){
					if (s.getFrom().equals(act)){
						forA.add(0.);
					}
					else{
						if(!s.haveDestination()){
							if(!act.equals(sPrim.getFrom())){
								forA.add(0.);
							}
							else{
								if(sPrim.haveDestination()){
									forA.add(td.probability(sPrim.getFrom(), sPrim.getTo()));
									//Miramos todos, al lo mejor solo vecinos??
									//INCREMENTAR ACCUMULADOR
								}								
							}
						}
					}
						
				}
				//ANADIR CASO sPrim.To = null con accumulador
				
				forS.add(forA);
			}
			transitions.add(forS);
		}
		
	}

	@Override
	public Action act(Vehicle vehicle, Task availableTask) {
		Action action;

		if (availableTask == null || random.nextDouble() > pPickup) {
			City currentCity = vehicle.getCurrentCity();
			action = new Move(currentCity.randomNeighbor(random));
		} else {
			action = new Pickup(availableTask);
		}
		
		if (numActions >= 1) {
			System.out.println("The total profit after "+numActions+" actions is "+myAgent.getTotalProfit()+" (average profit: "+(myAgent.getTotalProfit() / (double)numActions)+")");
		}
		numActions++;
		
		return action;
	}
}
